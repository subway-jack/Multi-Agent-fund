import os
import sys

project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../'))
sys.path.insert(0, project_root)

from src.agents import ChatAgent,DeepResearchAgent

from src.types import ModelPlatformType,ModelType
from src.models import ModelFactory
from src.prompts import DeepResearchPromptTemplateDict
from src.toolkits import WebSearchToolkit,SandboxToolkit,FunctionTool

single_model = ModelFactory.create(
    model_platform=ModelPlatformType.OPENAI,
    model_type=ModelType.GPT_4_1_MINI,
    model_config_dict={"temperature": 0,
                       "stop":["</tool_use>\n<analysis>","</multi_tool_use.parallel>\n<analysis>","</analysis>\n\n<final>"]},
)

web_search_toolkit = WebSearchToolkit()
sandbox_toolkit = SandboxToolkit(
   default_file_map={},
   default_requirements=["requests","retry","pytest","numpy","mujoco","mujoco-py"],
   timeout_minutes=120
)

chat_agent = DeepResearchAgent(
    system_message=DeepResearchPromptTemplateDict.build(), 
    model=single_model,
    tools=[
       FunctionTool(sandbox_toolkit.file_tool)
    ]
)

task_describe = """
<Task Description>\n## Description\n\nThe 3D bipedal robot is designed to simulate a human. It has a torso (abdomen) with a pair of\nlegs and arms. The legs each consist of three body parts, and the arms 2 body parts (representing the knees and\nelbows respectively). The goal of the environment is to walk forward as fast as possible without falling over.\n\n## Action Space\n\nThe action space is a `Box(-1, 1, (17,), float32)`. An action represents the torques applied at the hinge joints.\n\n| Num | Action                                                                             | Control Min | Control Max | Name (in corresponding XML file) | Joint | Unit         |\n| --- | ---------------------------------------------------------------------------------- | ----------- | ----------- | -------------------------------- | ----- | ------------ |\n| 0   | Torque applied on the hinge in the y-coordinate of the abdomen                     | -0.4        | 0.4         | abdomen_y                        | hinge | torque (N m) |\n| 1   | Torque applied on the hinge in the z-coordinate of the abdomen                     | -0.4        | 0.4         | abdomen_z                        | hinge | torque (N m) |\n| 2   | Torque applied on the hinge in the x-coordinate of the abdomen                     | -0.4        | 0.4         | abdomen_x                        | hinge | torque (N m) |\n| 3   | Torque applied on the rotor between torso/abdomen and the right hip (x-coordinate) | -0.4        | 0.4         | right_hip_x (right_thigh)        | hinge | torque (N m) |\n| 4   | Torque applied on the rotor between torso/abdomen and the right hip (z-coordinate) | -0.4        | 0.4         | right_hip_z (right_thigh)        | hinge | torque (N m) |\n| 5   | Torque applied on the rotor between torso/abdomen and the right hip (y-coordinate) | -0.4        | 0.4         | right_hip_y (right_thigh)        | hinge | torque (N m) |\n| 6   | Torque applied on the rotor between the right hip/thigh and the right shin         | -0.4        | 0.4         | right_knee                       | hinge | torque (N m) |\n| 7   | Torque applied on the rotor between torso/abdomen and the left hip (x-coordinate)  | -0.4        | 0.4         | left_hip_x (left_thigh)          | hinge | torque (N m) |\n| 8   | Torque applied on the rotor between torso/abdomen and the left hip (z-coordinate)  | -0.4        | 0.4         | left_hip_z (left_thigh)          | hinge | torque (N m) |\n| 9   | Torque applied on the rotor between torso/abdomen and the left hip (y-coordinate)  | -0.4        | 0.4         | left_hip_y (left_thigh)          | hinge | torque (N m) |\n| 10  | Torque applied on the rotor between the left hip/thigh and the left shin           | -0.4        | 0.4         | left_knee                        | hinge | torque (N m) |\n| 11  | Torque applied on the rotor between the torso and right upper arm (coordinate -1)  | -0.4        | 0.4         | right_shoulder1                  | hinge | torque (N m) |\n| 12  | Torque applied on the rotor between the torso and right upper arm (coordinate -2)  | -0.4        | 0.4         | right_shoulder2                  | hinge | torque (N m) |\n| 13  | Torque applied on the rotor between the right upper arm and right lower arm        | -0.4        | 0.4         | right_elbow                      | hinge | torque (N m) |\n| 14  | Torque applied on the rotor between the torso and left upper arm (coordinate -1)   | -0.4        | 0.4         | left_shoulder1                   | hinge | torque (N m) |\n| 15  | Torque applied on the rotor between the torso and left upper arm (coordinate -2)   | -0.4        | 0.4         | left_shoulder2                   | hinge | torque (N m) |\n| 16  | Torque applied on the rotor between the left upper arm and left lower arm          | -0.4        | 0.4         | left_elbow                       | hinge | torque (N m) |\n\n## Observation Space\n\nObservations consist of positional values of different body parts of the Humanoid,\nfollowed by the velocities of those individual parts (their derivatives) with all the\npositions ordered before all the velocities.\n\nBy default, observations do not include the x- and y-coordinates of the torso. These may\nbe included by passing `exclude_current_positions_from_observation=False` during construction.\nIn that case, the observation space will be a `Box(-Inf, Inf, (378,), float64)` where the first two observations\nrepresent the x- and y-coordinates of the torso.\nRegardless of whether `exclude_current_positions_from_observation` was set to true or false, the x- and y-coordinates\nwill be returned in `info` with keys `\"x_position\"` and `\"y_position\"`, respectively.\n\nHowever, by default, the observation is a `Box(-Inf, Inf, (376,), float64)`. The elements correspond to the following:\n\n| Num      | Observation                                                                                                     | Min  | Max | Name (in corresponding XML file) | Joint | Unit                       |\n| -------- | --------------------------------------------------------------------------------------------------------------- | ---- | --- | -------------------------------- | ----- | -------------------------- |\n| 0        | z-coordinate of the torso (centre)                                                                              | -Inf | Inf | root                             | free  | position (m)               |\n| 1        | x-orientation of the torso (centre)                                                                             | -Inf | Inf | root                             | free  | angle (rad)                |\n| 2        | y-orientation of the torso (centre)                                                                             | -Inf | Inf | root                             | free  | angle (rad)                |\n| 3        | z-orientation of the torso (centre)                                                                             | -Inf | Inf | root                             | free  | angle (rad)                |\n| 4        | w-orientation of the torso (centre)                                                                             | -Inf | Inf | root                             | free  | angle (rad)                |\n| 5        | z-angle of the abdomen (in lower_waist)                                                                         | -Inf | Inf | abdomen_z                        | hinge | angle (rad)                |\n| 6        | y-angle of the abdomen (in lower_waist)                                                                         | -Inf | Inf | abdomen_y                        | hinge | angle (rad)                |\n| 7        | x-angle of the abdomen (in pelvis)                                                                              | -Inf | Inf | abdomen_x                        | hinge | angle (rad)                |\n| 8        | x-coordinate of angle between pelvis and right hip (in right_thigh)                                             | -Inf | Inf | right_hip_x                      | hinge | angle (rad)                |\n| 9        | z-coordinate of angle between pelvis and right hip (in right_thigh)                                             | -Inf | Inf | right_hip_z                      | hinge | angle (rad)                |\n| 10       | y-coordinate of angle between pelvis and right hip (in right_thigh)                                             | -Inf | Inf | right_hip_y                      | hinge | angle (rad)                |\n| 11       | angle between right hip and the right shin (in right_knee)                                                      | -Inf | Inf | right_knee                       | hinge | angle (rad)                |\n| 12       | x-coordinate of angle between pelvis and left hip (in left_thigh)                                               | -Inf | Inf | left_hip_x                       | hinge | angle (rad)                |\n| 13       | z-coordinate of angle between pelvis and left hip (in left_thigh)                                               | -Inf | Inf | left_hip_z                       | hinge | angle (rad)                |\n| 14       | y-coordinate of angle between pelvis and left hip (in left_thigh)                                               | -Inf | Inf | left_hip_y                       | hinge | angle (rad)                |\n| 15       | angle between left hip and the left shin (in left_knee)                                                         | -Inf | Inf | left_knee                        | hinge | angle (rad)                |\n| 16       | coordinate-1 (multi-axis) angle between torso and right arm (in right_upper_arm)                                | -Inf | Inf | right_shoulder1                  | hinge | angle (rad)                |\n| 17       | coordinate-2 (multi-axis) angle between torso and right arm (in right_upper_arm)                                | -Inf | Inf | right_shoulder2                  | hinge | angle (rad)                |\n| 18       | angle between right upper arm and right_lower_arm                                                               | -Inf | Inf | right_elbow                      | hinge | angle (rad)                |\n| 19       | coordinate-1 (multi-axis) angle between torso and left arm (in left_upper_arm)                                  | -Inf | Inf | left_shoulder1                   | hinge | angle (rad)                |\n| 20       | coordinate-2 (multi-axis) angle between torso and left arm (in left_upper_arm)                                  | -Inf | Inf | left_shoulder2                   | hinge | angle (rad)                |\n| 21       | angle between left upper arm and left_lower_arm                                                                 | -Inf | Inf | left_elbow                       | hinge | angle (rad)                |\n| 22       | x-coordinate velocity of the torso (centre)                                                                     | -Inf | Inf | root                             | free  | velocity (m/s)             |\n| 23       | y-coordinate velocity of the torso (centre)                                                                     | -Inf | Inf | root                             | free  | velocity (m/s)             |\n| 24       | z-coordinate velocity of the torso (centre)                                                                     | -Inf | Inf | root                             | free  | velocity (m/s)             |\n| 25       | x-coordinate angular velocity of the torso (centre)                                                             | -Inf | Inf | root                             | free  | anglular velocity (rad/s)  |\n| 26       | y-coordinate angular velocity of the torso (centre)                                                             | -Inf | Inf | root                             | free  | anglular velocity (rad/s)  |\n| 27       | z-coordinate angular velocity of the torso (centre)                                                             | -Inf | Inf | root                             | free  | anglular velocity (rad/s)  |\n| 28       | z-coordinate of angular velocity of the abdomen (in lower_waist)                                                | -Inf | Inf | abdomen_z                        | hinge | anglular velocity (rad/s)  |\n| 29       | y-coordinate of angular velocity of the abdomen (in lower_waist)                                                | -Inf | Inf | abdomen_y                        | hinge | anglular velocity (rad/s)  |\n| 30       | x-coordinate of angular velocity of the abdomen (in pelvis)                                                     | -Inf | Inf | abdomen_x                        | hinge | aanglular velocity (rad/s) |\n| 31       | x-coordinate of the angular velocity of the angle between pelvis and right hip (in right_thigh)                 | -Inf | Inf | right_hip_x                      | hinge | anglular velocity (rad/s)  |\n| 32       | z-coordinate of the angular velocity of the angle between pelvis and right hip (in right_thigh)                 | -Inf | Inf | right_hip_z                      | hinge | anglular velocity (rad/s)  |\n| 33       | y-coordinate of the angular velocity of the angle between pelvis and right hip (in right_thigh)                 | -Inf | Inf | right_hip_y                      | hinge | anglular velocity (rad/s)  |\n| 34       | angular velocity of the angle between right hip and the right shin (in right_knee)                              | -Inf | Inf | right_knee                       | hinge | anglular velocity (rad/s)  |\n| 35       | x-coordinate of the angular velocity of the angle between pelvis and left hip (in left_thigh)                   | -Inf | Inf | left_hip_x                       | hinge | anglular velocity (rad/s)  |\n| 36       | z-coordinate of the angular velocity of the angle between pelvis and left hip (in left_thigh)                   | -Inf | Inf | left_hip_z                       | hinge | anglular velocity (rad/s)  |\n| 37       | y-coordinate of the angular velocity of the angle between pelvis and left hip (in left_thigh)                   | -Inf | Inf | left_hip_y                       | hinge | anglular velocity (rad/s)  |\n| 38       | angular velocity of the angle between left hip and the left shin (in left_knee)                                 | -Inf | Inf | left_knee                        | hinge | anglular velocity (rad/s)  |\n| 39       | coordinate-1 (multi-axis) of the angular velocity of the angle between torso and right arm (in right_upper_arm) | -Inf | Inf | right_shoulder1                  | hinge | anglular velocity (rad/s)  |\n| 40       | coordinate-2 (multi-axis) of the angular velocity of the angle between torso and right arm (in right_upper_arm) | -Inf | Inf | right_shoulder2                  | hinge | anglular velocity (rad/s)  |\n| 41       | angular velocity of the angle between right upper arm and right_lower_arm                                       | -Inf | Inf | right_elbow                      | hinge | anglular velocity (rad/s)  |\n| 42       | coordinate-1 (multi-axis) of the angular velocity of the angle between torso and left arm (in left_upper_arm)   | -Inf | Inf | left_shoulder1                   | hinge | anglular velocity (rad/s)  |\n| 43       | coordinate-2 (multi-axis) of the angular velocity of the angle between torso and left arm (in left_upper_arm)   | -Inf | Inf | left_shoulder2                   | hinge | anglular velocity (rad/s)  |\n| 44       | angular velocity of the angle between left upper arm and left_lower_arm                                         | -Inf | Inf | left_elbow                       | hinge | anglular velocity (rad/s)  |\n| excluded | x-coordinate of the torso (centre)                                                                              | -Inf | Inf | root                             | free  | position (m)               |\n| excluded | y-coordinate of the torso (centre)                                                                              | -Inf | Inf | root                             | free  | position (m)               |\n\nAdditionally, after all the positional and velocity based values in the table,\nthe observation contains (in order):\n\n- *cinert:* Mass and inertia of a single rigid body relative to the center of mass\n  (this is an intermediate result of transition). It has shape 14*10 (*nbody * 10*)\n  and hence adds to another 140 elements in the state space.\n- *cvel:* Center of mass based velocity. It has shape 14 * 6 (*nbody * 6*) and hence\n  adds another 84 elements in the state space\n- *qfrc_actuator:* Constraint force generated as the actuator force. This has shape\n  `(23,)`  *(nv * 1)* and hence adds another 23 elements to the state space.\n- *cfrc_ext:* This is the center of mass based external force on the body.  It has shape\n  14 * 6 (*nbody * 6*) and hence adds to another 84 elements in the state space.\n  where *nbody* stands for the number of bodies in the robot and *nv* stands for the\n  number of degrees of freedom (*= dim(qvel)*)\n\nThe body parts are:\n\n| id (for `v2`,`v3`,`v4`) | body part                                   |\n| ----------------------------- | ------------------------------------------- |\n| 0                             | worldBody (note: all values are constant 0) |\n| 1                             | torso                                       |\n| 2                             | lwaist                                      |\n| 3                             | pelvis                                      |\n| 4                             | right_thigh                                 |\n| 5                             | right_sin                                   |\n| 6                             | right_foot                                  |\n| 7                             | left_thigh                                  |\n| 8                             | left_sin                                    |\n| 9                             | left_foot                                   |\n| 10                            | right_upper_arm                             |\n| 11                            | right_lower_arm                             |\n| 12                            | left_upper_arm                              |\n| 13                            | left_lower_arm                              |\n\nThe joints are:\n\n| id (for `v2`,`v3`,`v4`) | joint           |\n| ----------------------------- | --------------- |\n| 0                             | root            |\n| 1                             | root            |\n| 2                             | root            |\n| 3                             | root            |\n| 4                             | root            |\n| 5                             | root            |\n| 6                             | abdomen_z       |\n| 7                             | abdomen_y       |\n| 8                             | abdomen_x       |\n| 9                             | right_hip_x     |\n| 10                            | right_hip_z     |\n| 11                            | right_hip_y     |\n| 12                            | right_knee      |\n| 13                            | left_hip_x      |\n| 14                            | left_hiz_z      |\n| 15                            | left_hip_y      |\n| 16                            | left_knee       |\n| 17                            | right_shoulder1 |\n| 18                            | right_shoulder2 |\n| 19                            | right_elbow     |\n| 20                            | left_shoulder1  |\n| 21                            | left_shoulder2  |\n| 22                            | left_elfbow     |\n\nThe (x,y,z) coordinates are translational DOFs while the orientations are rotational\nDOFs expressed as quaternions. One can read more about free joints on the\n[Mujoco Documentation](https://mujoco.readthedocs.io/en/latest/XMLreference.html).\n\n**Note:** Humanoid-v4 environment no longer has the following contact forces issue.\nIf using previous Humanoid versions from v4, there have been reported issues that using a Mujoco-Py version > 2.0\nresults in the contact forces always being 0. As such we recommend to use a Mujoco-Py\nversion < 2.0 when using the Humanoid environment if you would like to report results\nwith contact forces (if contact forces are not used in your experiments, you can use\nversion > 2.0).\n\n## Rewards\n\nThe reward consists of three parts:\n\n- *healthy_reward*: Every timestep that the humanoid is alive (see section Episode Termination for definition), it gets a reward of fixed value `healthy_reward`\n- *forward_reward*: A reward of walking forward which is measured as *`forward_reward_weight` *\n  (average center of mass before action - average center of mass after action)/dt*.\n  *dt* is the time between actions and is dependent on the frame_skip parameter\n  (default is 5), where the frametime is 0.003 - making the default *dt = 5 * 0.003 = 0.015*.\n  This reward would be positive if the humanoid walks forward (in positive x-direction). The calculation\n  for the center of mass is defined in the `.py` file for the Humanoid.\n- *ctrl_cost*: A negative reward for penalising the humanoid if it has too\n  large of a control force. If there are *nu* actuators/controls, then the control has\n  shape  `nu x 1`. It is measured as *`ctrl_cost_weight` * sum(control `<sup>`2 `</sup>`)*.\n- *contact_cost*: A negative reward for penalising the humanoid if the external\n  contact force is too large. It is calculated by clipping\n  *`contact_cost_weight` * sum(external contact force `<sup>`2 `</sup>`)* to the interval specified by `contact_cost_range`.\n\nThe total reward returned is ***reward*** *=* *healthy_reward + forward_reward - ctrl_cost - contact_cost* and `info` will also contain the individual reward terms\n\n## Starting State\n\nAll observations start in state\n(0.0, 0.0,  1.4, 1.0, 0.0  ... 0.0) with a uniform noise in the range\nof [-`reset_noise_scale`, `reset_noise_scale`] added to the positional and velocity values (values in the table)\nfor stochasticity. Note that the initial z coordinate is intentionally\nselected to be high, thereby indicating a standing up humanoid. The initial\norientation is designed to make it face forward as well.\n\n## Episode End\n\nThe humanoid is said to be unhealthy if the z-position of the torso is no longer contained in the\nclosed interval specified by the argument `healthy_z_range`.\n\nIf `terminate_when_unhealthy=True` is passed during construction (which is the default),\nthe episode ends when any of the following happens:\n\n1. Truncation: The episode duration reaches a 1000 timesteps\n2. Termination: The humanoid is unhealthy\n\nIf `terminate_when_unhealthy=False` is passed, the episode is ended only when 1000 timesteps are exceeded.\n\n## Class Definition\n\nThe class should be called \"Environment\". It should have at least:\n\n- an __init__ function to set up the Environment, which defines all the variables described in the above documentation, plus any additional variables needed to maintain the environment state or to implement its functionality.\n- a set_state function to set a custom value for the environment and its internal representation (you can assume that when \"set_state\" is used, the task is not done and internal variables should be set as a consequence). set_state takes a single argument as input: a state observation from the observation space defined above.\n- a step function to predict a step in the environment. The input parameters for the step function are:\n\n  - An action, which must be contained in the action space described above.\n\n  The outputs required by the step function are:\n\n  - An observation, which must be contained in the observation space described above.\n  - The reward for taking the action, as described in the reward definition above.\n  - A boolean variable indicating if the episode is done.\n\n</Task Description>
"""

research_report = """
# Humanoid-v4 Environment Technical Specification\n\n## 1. Environment Overview\nHumanoid-v4 simulates a 3D bipedal robot designed to mimic human locomotion. The robot consists of a torso (abdomen), two legs (each with three body parts), and two arms (each with two body parts representing knees and elbows). The primary objective is to walk forward as fast as possible without falling.\n\n## 2. Action Space\n- **Type:** Box\n- **Shape:** (17,)\n- **Data Type:** float32\n- **Range:** Each element is bounded between -0.4 and 0.4 (torque in Newton-meters)\n- **Description:** Each action element corresponds to torque applied at specific hinge joints as follows:\n\n| Index | Description                                                                                  | Joint Name (XML)       | Unit       |\n|-------|----------------------------------------------------------------------------------------------|-----------------------|------------|\n| 0     | Torque on hinge in y-coordinate of abdomen                                                  | abdomen_y             | N·m (torque) |\n| 1     | Torque on hinge in z-coordinate of abdomen                                                  | abdomen_z             | N·m (torque) |\n| 2     | Torque on hinge in x-coordinate of abdomen                                                  | abdomen_x             | N·m (torque) |\n| 3     | Torque on rotor between torso/abdomen and right hip (x-coordinate)                          | right_hip_x (right_thigh) | N·m (torque) |\n| 4     | Torque on rotor between torso/abdomen and right hip (z-coordinate)                          | right_hip_z (right_thigh) | N·m (torque) |\n| 5     | Torque on rotor between torso/abdomen and right hip (y-coordinate)                          | right_hip_y (right_thigh) | N·m (torque) |\n| 6     | Torque on rotor between right hip/thigh and right shin                                     | right_knee            | N·m (torque) |\n| 7     | Torque on rotor between torso/abdomen and left hip (x-coordinate)                           | left_hip_x (left_thigh) | N·m (torque) |\n| 8     | Torque on rotor between torso/abdomen and left hip (z-coordinate)                           | left_hip_z (left_thigh) | N·m (torque) |\n| 9     | Torque on rotor between torso/abdomen and left hip (y-coordinate)                           | left_hip_y (left_thigh) | N·m (torque) |\n| 10    | Torque on rotor between left hip/thigh and left shin                                       | left_knee             | N·m (torque) |\n| 11    | Torque on rotor between torso and right upper arm (coordinate -1)                          | right_shoulder1       | N·m (torque) |\n| 12    | Torque on rotor between torso and right upper arm (coordinate -2)                          | right_shoulder2       | N·m (torque) |\n| 13    | Torque on rotor between right upper arm and right lower arm                                | right_elbow           | N·m (torque) |\n| 14    | Torque on rotor between torso and left upper arm (coordinate -1)                           | left_shoulder1        | N·m (torque) |\n| 15    | Torque on rotor between torso and left upper arm (coordinate -2)                           | left_shoulder2        | N·m (torque) |\n| 16    | Torque on rotor between left upper arm and left lower arm                                  | left_elbow            | N·m (torque) |\n\n## 3. Observation Space\n- **Type:** Box\n- **Shape:** \n  - (376,) if `exclude_current_positions_from_observation=True` (default)\n  - (378,) if `exclude_current_positions_from_observation=False` (includes torso x and y positions)\n- **Data Type:** float64\n- **Contents:**\n  - Positional values of body parts and joints (ordered)\n  - Velocity values of body parts and joints (ordered)\n  - Additional elements in order:\n    - `cinert`: Mass and inertia relative to center of mass, shape (14 bodies × 10) = 140 elements\n    - `cvel`: Center of mass based velocity, shape (14 bodies × 6) = 84 elements\n    - `qfrc_actuator`: Constraint force from actuators, shape (23,) elements\n    - `cfrc_ext`: Center of mass based external force, shape (14 bodies × 6) = 84 elements\n- **Orientation Representation:** Quaternions in (x, y, z, w) order as per Mujoco conventions.\n\n## 4. Joints and Body Parts\n- **Body Parts (IDs for v2, v3, v4):**\n\n| ID  | Body Part       |\n|------|-----------------|\n| 0    | worldBody (constant zeros) |\n| 1    | torso           |\n| 2    | lwaist          |\n| 3    | pelvis          |\n| 4    | right_thigh     |\n| 5    | right_sin       |\n| 6    | right_foot      |\n| 7    | left_thigh      |\n| 8    | left_sin        |\n| 9    | left_foot       |\n| 10   | right_upper_arm |\n| 11   | right_lower_arm |\n| 12   | left_upper_arm  |\n| 13   | left_lower_arm  |\n\n- **Joints (IDs for v2, v3, v4):**\n\n| ID  | Joint Name       |\n|------|------------------|\n| 0-5  | root             |\n| 6    | abdomen_z        |\n| 7    | abdomen_y        |\n| 8    | abdomen_x        |\n| 9    | right_hip_x      |\n| 10   | right_hip_z      |\n| 11   | right_hip_y      |\n| 12   | right_knee       |\n| 13   | left_hip_x       |\n| 14   | left_hip_z       |  <!-- corrected from \"left_hiz_z\" -->\n| 15   | left_hip_y       |\n| 16   | left_knee        |\n| 17   | right_shoulder1  |\n| 18   | right_shoulder2  |\n| 19   | right_elbow      |\n| 20   | left_shoulder1   |\n| 21   | left_shoulder2   |\n| 22   | left_elbow       |  <!-- corrected from \"left_elfbow\" -->\n\n## 5. Reward Function\nThe total reward at each timestep is computed as:\n\n\\[\n\\text{reward} = \\text{healthy\\_reward} + \\text{forward\\_reward} - \\text{ctrl\\_cost} - \\text{contact\\_cost}\n\\]\n\nWhere:\n\n- \\(\\text{forward\\_reward} = \\text{forward\\_reward\\_weight} \\times \\frac{x_{\\text{after}} - x_{\\text{before}}}{dt}\\)\n\n- \\(dt = \\text{frame\\_skip} \\times \\text{frame\\_time} = 5 \\times 0.003 = 0.015\\, \\text{s}\\) (default)\n\n- \\(\\text{ctrl\\_cost} = \\text{ctrl\\_cost\\_weight} \\times \\sum_{i=1}^{17} a_i^2\\), where \\(a_i\\) is the \\(i\\)-th action torque\n\n- \\(\\text{contact\\_cost} = \\text{clip}\\left(\\text{contact\\_cost\\_weight} \\times \\sum (\\text{external contact force})^2, \\text{contact\\_cost\\_range}\\right)\\)\n\n- \\(\\text{healthy\\_reward}\\) is a fixed positive reward given if the humanoid is \"healthy\" (see Episode Termination)\n\n**Units:**\n- Position \\(x\\) in meters (m)\n- Time \\(dt\\) in seconds (s)\n- Torque in Newton-meters (N·m)\n- Forces in Newtons (N)\n\n## 6. Starting State\n- Initial observation vector with torso z-position at 1.4 m, facing forward (quaternion orientation).\n- Uniform noise added to positional and velocity components in the range \\([- \\text{reset\\_noise\\_scale}, + \\text{reset\\_noise\\_scale}]\\).\n- Default \\(\\text{reset\\_noise\\_scale} = 0.01\\).\n\n## 7. Episode Termination\n- The humanoid is considered unhealthy if the torso z-position is outside the closed interval \\(\\text{healthy\\_z\\_range} = [1.0, 2.0]\\).\n- If \\(\\text{terminate\\_when\\_unhealthy} = \\text{True}\\) (default), the episode ends when:\n  - The humanoid is unhealthy, or\n  - The episode reaches 1000 timesteps (max episode length).\n- If \\(\\text{terminate\\_when\\_unhealthy} = \\text{False}\\), the episode ends only after 1000 timesteps.\n\n## 8. Class Interface\n\n### Class Name\n`Environment`\n\n### Methods\n\n- `__init__(self, **kwargs)`\n  - Initializes the environment.\n  - Accepts parameters such as `ctrl_cost_weight`, `reset_noise_scale`, `healthy_z_range`, `terminate_when_unhealthy`, `exclude_current_positions_from_observation`, etc.\n  - Sets up action and observation spaces, internal state, and Mujoco model.\n\n- `set_state(self, state: np.ndarray) -> None`\n  - Sets the environment's internal state to the provided observation vector.\n  - Resets the done flag to False.\n  - Assumes the environment is not done after setting state.\n\n- `step(self, action: np.ndarray) -> Tuple[np.ndarray, float, bool, dict]`\n  - Applies the given action (must be within the action space).\n  - Returns:\n    - `observation`: current observation vector within the observation space.\n    - `reward`: scalar reward computed as per the reward function.\n    - `done`: boolean indicating if the episode has ended.\n    - `info`: dictionary containing:\n      - `\"x_position\"`: torso x-coordinate (float)\n      - `\"y_position\"`: torso y-coordinate (float)\n      - `\"reward_forward\"`: forward reward component (float)\n      - `\"reward_ctrl\"`: control cost component (float)\n      - `\"reward_contact\"`: contact cost component (float)\n      - `\"reward_healthy\"`: healthy reward component (float)\n\n- (Optional) `reset(self, **kwargs)` and `render(self, mode='human')` methods are expected for Gymnasium compliance but are not detailed here.\n\n## 9. Dependencies and Compatibility\n- Requires `mujoco` bindings version >= 2.1.3.\n- For contact force reporting, it is recommended to use `mujoco-py` version < 2.0, as versions > 2.0 may report zero contact forces.\n- Compatible with Gymnasium API.\n\n## 10. Default Parameter Values\n\n| Parameter                          | Default Value          | Description                                      |\n|----------------------------------|-----------------------|------------------------------------------------|\n| `reset_noise_scale`               | 0.01                  | Noise scale for initial state perturbation     |\n| `healthy_z_range`                | (1.0, 2.0)            | Torso z-position range for \"healthy\" status    |\n| `terminate_when_unhealthy`       | True                  | Whether to end episode when unhealthy           |\n| `forward_reward_weight`          | 1.25                  | Weight for forward reward component             |\n| `ctrl_cost_weight`               | 0.1                   | Weight for control cost penalty                  |\n| `contact_cost_weight`            | 5e-7                  | Weight for contact cost penalty                  |\n| `contact_cost_range`             | (0, +∞)               | Clipping range for contact cost                  |\n| `exclude_current_positions_from_observation` | True        | Whether to exclude torso x,y from observations  |\n\n## 11. Notes and Conventions\n- Quaternion orientation is represented as (x, y, z, w).\n- The environment's observation vector excludes torso x,y by default but always returns them in the info dictionary.\n- The environment uses a maximum episode length of 1000 timesteps.\n- The action space limits are ±0.4 N·m torque per joint, despite the initial description's mention of Box(-1,1).\n- Joint name typos corrected: \"left_hiz_z\" → \"left_hip_z\", \"left_elfbow\" → \"left_elbow\".\n\n## 12. Assumptions and Risks\n- Contact cost clipping range is assumed to be (0, +∞) due to lack of explicit specification.\n- Gymnasium API reset and render methods are assumed standard.\n- Quaternion order follows Mujoco documentation.\n- Mujoco-py version recommendation is advisory; newer versions may affect contact force reporting.\n- These assumptions carry low to medium risk and are documented for implementers.\n\n---\n\n**References:**\n\n- [Gymnasium Humanoid Environment Documentation, 2025-01-01](https://gymnasium.farama.org/environments/mujoco/humanoid/)\n- [Gym Humanoid Environment Documentation, 2023-05-20](https://www.gymlibrary.dev/environments/mujoco/humanoid/)\n- [Mujoco Documentation on Free Joints and Quaternions, 2023-12-01](https://mujoco.readthedocs.io/en/latest/XMLreference.html)\n
"""

question = f"""
You are an expert Reinforcement Learning (RL) Engineer. Your specialty is translating technical specifications into high-quality, self-contained, and reproducible Python simulation environments.
Be precise, implementation-focused, and reproducible.

<TASK DESCRIPTION>
{task_describe}
</TASK DESCRIPTION>

<Research Report>
{research_report}
</Research Report>

<Workflow>
1. **Deconstruct Specification:** Carefully review the `<Research Report>` to fully understand the environment's specification, including state/action spaces, dynamics, reward function, and termination conditions.
2. **Plan Class Structure:** Outline the `Environment` class, including its internal state variables, helper methods, and the public interface (`__init__`, `reset`, `set_state`, `step`).
3. **Implement Complete Code:** Write the full implementation of the `Environment` class.
4. **Self-Correction Review:** Meticulously check that the generated code fully complies with the `<TASK DESCRIPTION>`, the `<Research Report>`, and all `<ImplementationRequirements>`.
5. **Finalize Output:** Present the complete, reviewed, and runnable code in the specified final format.
</Workflow>

<ImplementationRequirements>
1) Interface (single file):
Implement a complete, self-contained Python class `Environment` with:
  • `__init__(self, seed: int | None = None)`  
  • `reset(self, seed: int | None = None) -> ndarray`  — reinitialize the episode and **return the initial observation** in canonical shape  
  • `set_state(self, state)`  — must accept ndarray OR list/tuple in canonical shape  
  • `step(self, action) -> tuple[ndarray, float, bool]`  — (observation, reward, done)
Requirements:
- Explicitly define state, action, and observation spaces (types, shapes, ranges, formats).
- Provide reproducibility (seeding) via constructor and/or a `seed(int)` method.
- Be robust to common representations:
  - `set_state`: list/tuple/ndarray of the same logical content.
  - `step`: int / numpy integer scalar / 0-D or 1-D len-1 ndarray, etc. (convert to canonical form; raise clear TypeError/ValueError on invalid).
- No dependence on external RL frameworks; no Gym inheritance.
- Maintain internal state consistency; allow reconstruction from observations where applicable.
- Clean, readable code suitable for RL experimentation.

2) Determinism & validation:
   - Provide reproducibility via seed (constructor and/or `seed(int)` method).
   - Normalize inputs: accept equivalent representations (e.g., numpy scalar/int/len-1 array) and convert to canonical.
   - Validate inputs; raise clear one-line errors (ValueError/TypeError) on invalid shapes/ranges.

3) Dynamics (MCTS/control oriented):
   - Choose and document an integration scheme (e.g., Explicit Euler) consistent with the research report.
   - Use a stable `dt`; clamp to safety bounds; keep all values finite (no NaN/Inf).
   - Keep per-step computation efficient and allocation-light.

4) Dependencies & style:
   - No Gym inheritance or external RL frameworks unless explicitly allowed.
   - Allowed: Third-party libraries as needed (e.g., NumPy, MuJoCo, SciPy, Numba, JAX, PyTorch, etc.).
   - Clean, readable code suitable for RL experimentation.

</ImplementationRequirements>

<Output Format>
<final>
```python
# Your complete, runnable single-file implementation here.
```
</final>
</Output Format>
"""

result = chat_agent.step(question)
print(result)
